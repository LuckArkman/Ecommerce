@model ECommerce.WebApp.Models.ProductListViewModel
@{
    ViewData["Title"] = "Produtos";
}

<!-- Banner Principal -->
<div class="jumbotron-custom-container"> 
    <img src="~/images/banner.webp" alt="" class="jumbotron-image">
    <div class="jumbotron-content"> 
        <div class="container"> 
            <div class="row">
                <div class="col-md-6 offset-md-6 text-end">
                </div>
            </div>
        </div>
    </div>
</div>
<!-- Breadcrumb -->
<nav aria-label="breadcrumb" class="container-fluid breadcrumb-custom">
    <ol class="breadcrumb mb-0">
        <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index">Home</a></li>
        @if (Model.QueryParams.CategoryId > 0 && Model.Categories != null)
        {
            <li class="breadcrumb-item"><a asp-controller="Products" asp-action="Index">Produtos</a></li>
            <li class="breadcrumb-item active" aria-current="page">@Model.Categories.FirstOrDefault(c => c.Id == Model.QueryParams.CategoryId)?.Name</li>
        }
        else if (!string.IsNullOrEmpty(Model.QueryParams.SearchTerm))
        {
            <li class="breadcrumb-item"><a asp-controller="Products" asp-action="Index">Produtos</a></li>
            <li class="breadcrumb-item active" aria-current="page">Resultados para "@Model.QueryParams.SearchTerm"</li>
        }
        else
        {
            <li class="breadcrumb-item active" aria-current="page">Todos os Produtos</li>
        }
    </ol>
</nav>

<!-- Cabeçalho da Categoria/Página -->
<section class="container-fluid category-header">
    @if (Model.QueryParams.CategoryId > 0 && Model.Categories != null)
    {
        <h3>Móveis para @Model.Categories.FirstOrDefault(c => c.Id == Model.QueryParams.CategoryId)?.Name em Oferta!</h3>
        <p>Na CasaVee você encontra diversas opções de móveis para @Model.Categories.FirstOrDefault(c => c.Id == Model.QueryParams.CategoryId)?.Name. Continue e veja as nossas diversas opções!</p>
    }
    else if (!string.IsNullOrEmpty(Model.QueryParams.SearchTerm))
    {
        <h3>Resultados da Busca para "@Model.QueryParams.SearchTerm"</h3>
        <p>Encontramos diversos produtos que correspondem à sua busca.</p>
    }
    else
    {
        <h3>Todos os Nossos Produtos</h3>
        <p>Explore a nossa vasta coleção de móveis e decoração para cada canto da sua casa.</p>
    }
</section>

<div class="container my-4">
    <!-- Barra de Filtros e Ordenação -->
    <form asp-controller="Products" asp-action="Index" method="get">
        <div class="row align-items-center filters-sort-bar mb-4 rounded">
            <div class="col-auto me-auto">
                <button class="btn btn-outline-secondary" type="button" onclick="window.location.href='/products'">
                    <i class="bi bi-x-circle me-2"></i> Limpar filtros
                </button>
            </div>
            <div class="col-auto">
                <span class="text-muted">@Model.TotalItems itens</span>
            </div>
            <div class="col-md-3">
                <label for="categoryId" class="form-label visually-hidden">Filtrar por Categoria:</label>
                <select id="categoryId" name="CategoryId" class="form-select" onchange="this.form.submit()">
                    <option value="0">Todas as Categorias</option>
                    @foreach (var category in Model.Categories)
                    {
                        <option value="@category.Id" selected="@(Model.QueryParams.CategoryId == category.Id)">@category.Name</option>

                    }
                </select>
            </div>
            <div class="col-md-3">
                <label for="orderBy" class="form-label visually-hidden">Ordenar por:</label>
                <select id="orderBy" name="OrderBy" class="form-select" onchange="this.form.submit()">
                    <option value="newest" asp-selected="@(Model.QueryParams.OrderBy == "newest")">Lançamentos</option>
                    <option value="priceAsc" asp-selected="@(Model.QueryParams.OrderBy == "priceAsc")">Menor Preço</option>
                    <option value="priceDesc" asp-selected="@(Model.QueryParams.OrderBy == "priceDesc")">Maior Preço</option>
                    <option value="oldest" asp-selected="@(Model.QueryParams.OrderBy == "oldest")">Mais Antigos</option>
                </select>
            </div>
            <input type="hidden" name="SearchTerm" value="@Model.QueryParams.SearchTerm" /> @* Manter termo de busca *@
            <input type="hidden" name="PageNumber" value="@Model.CurrentPage" /> @* Manter página atual *@
        </div>
    </form>

    @if (Model.Products == null || !Model.Products.Any())
    {
        <div class="alert alert-info text-center" role="alert">
            Nenhum produto encontrado com os critérios selecionados.
        </div>
    }
    else
    {
        <div class="row">
            @foreach (var product in Model.Products.Skip((Model.CurrentPage - 1) * Model.ItemsPerPage).Take(Model.ItemsPerPage))
            {
                <div class="col-md-3 mb-4">
                    <div class="card h-100">
                        <img src="@product.ImageUrl" class="card-img-top" alt="@product.Name" style="height: 200px;">
                        <div class="card-body text-center d-flex flex-column">
                            <h5 class="card-title fw-bold">@product.Name</h5>
                            <p class="card-text text-muted small">@product.Description</p>
                            <p class="card-text fs-5 fw-bold text-success">@product.Price.ToString("C")</p>
                            @if (product.Price > 100 && product.Price < 1000)
                            {
                                <p class="card-text text-decoration-line-through text-danger small">@(product.Price / 0.9m).ToString("C")</p>
                                <span class="badge bg-danger position-absolute top-0 end-0 mt-2 me-2">10% OFF</span>
                            }
                            <a asp-controller="Products" asp-action="Details" asp-route-id="@product.Id" class="btn btn-outline-primary mt-auto">Ver Detalhes</a>
                            <button class="btn btn-primary mt-2 add-to-cart-btn" data-product-id="@product.Id" data-product-name="@product.Name" data-product-price="@product.Price" data-product-image="@product.ImageUrl" data-product-stock="@product.Stock" @(product.Stock <= 0 ? "disabled" : "")>
                                Adicionar ao Carrinho
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Paginação -->
        <nav aria-label="Page navigation" class="mt-4">
            <ul class="pagination justify-content-center">
                <li class="page-item @(Model.CurrentPage == 1 ? "disabled" : "")">
                    <a class="page-link" asp-controller="Products" asp-action="Index" asp-route-categoryId="@Model.QueryParams.CategoryId" asp-route-orderBy="@Model.QueryParams.OrderBy" asp-route-searchTerm="@Model.QueryParams.SearchTerm" asp-route-pageNumber="@(Model.CurrentPage - 1)">Anterior</a>
                </li>
                @for (int i = 1; i <= Model.TotalPages; i++)
                {
                    <li class="page-item @(Model.CurrentPage == i ? "active" : "")">
                        <a class="page-link" asp-controller="Products" asp-action="Index" asp-route-categoryId="@Model.QueryParams.CategoryId" asp-route-orderBy="@Model.QueryParams.OrderBy" asp-route-searchTerm="@Model.QueryParams.SearchTerm" asp-route-pageNumber="@i">@i</a>
                    </li>
                }
                <li class="page-item @(Model.CurrentPage == Model.TotalPages ? "disabled" : "")">
                    <a class="page-link" asp-controller="Products" asp-action="Index" asp-route-categoryId="@Model.QueryParams.CategoryId" asp-route-orderBy="@Model.QueryParams.OrderBy" asp-route-searchTerm="@Model.QueryParams.SearchTerm" asp-route-pageNumber="@(Model.CurrentPage + 1)">Próxima</a>
                </li>
            </ul>
        </nav>
    }
</div>

<!-- Seção "O que deve ter em sala de jantar?" -->
@if (Model.QueryParams.CategoryId > 0 && Model.Categories != null)
{
    <section class="container-fluid info-section">
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-md-8 text-center">
                    @{
                        var categoryName = Model.Categories.FirstOrDefault(c => c.Id == Model.QueryParams.CategoryId)?.Name;
                    }
                    <h4>O que deve ter em @categoryName?</h4>
                    <p>Os principais móveis para @categoryName são:</p>
                    <p><strong>Mesa:</strong> A mesa é o móvel principal da sala de jantar. Ela deve ser escolhida de acordo com o tamanho do ambiente e o número de pessoas que não utilizá-la.</p>
                    <button class="btn btn-link" id="toggle-description-btn">Leia mais <i class="bi bi-chevron-down"></i></button>
                    <div id="full-description" style="display:none;">
                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
                    </div>
                </div>
            </div>
        </div>
    </section>
}

@section Scripts {
    <script>
        // Lógica para toggle da descrição "Leia mais"
        $('#toggle-description-btn').on('click', function() {
            $('#full-description').slideToggle();
            $(this).find('i').toggleClass('bi-chevron-down bi-chevron-up');
        });

        // Lógica para adicionar ao carrinho via AJAX (sem recarregar a página)
        $('.add-to-cart-btn').on('click', async function() {
            const productId = $(this).data('product-id');
            const productName = $(this).data('product-name');
            const productPrice = $(this).data('product-price');
            const productImageUrl = $(this).data('product-image'); // Adicione este dado ao botão se precisar no carrinho do cliente

            try {
                const response = await fetch('/Cart/AddToCart', { // Controller Cart, Action AddToCart
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val() // Para Anti-Forgery
                    },
                    body: JSON.stringify({ productId: productId, quantity: 1 })
                });

                if (response.ok) {
                    // Atualizar contador do carrinho no topo
                    let currentCount = parseInt($('#cart-item-count').text());
                    $('#cart-item-count').text(currentCount + 1);
                    alert(`"${productName}" adicionado ao carrinho!`);
                } else if (response.status === 401) { // Unauthorized
                    alert("Você precisa estar logado para adicionar itens ao carrinho.");
                    window.location.href = '/Identity/Account/Login'; // Redireciona para o login
                }
                else {
                    const errorData = await response.json();
                    alert('Erro ao adicionar ao carrinho: ' + (errorData.message || response.statusText));
                }
            } catch (error) {
                console.error('Erro de rede:', error);
                alert('Erro de rede ao adicionar ao carrinho.');
            }
        });

        // Lógica para a busca na navbar (redireciona para a página de produtos)
        $('#search-button').on('click', function() {
            const searchTerm = $('#search-input').val();
            if (searchTerm) {
                window.location.href = `/products?searchTerm=${encodeURIComponent(searchTerm)}`;
            }
        });
        $('#search-input').on('keypress', function(e) {
            if (e.which === 13) { // Enter key
                $('#search-button').click();
            }
        });

        // Lógica para atualizar o contador do carrinho ao carregar a página (se houver itens no cookie/sessão)
        $(document).ready(async function() {
            // Fazer uma chamada AJAX para obter a contagem atual do carrinho
            try {
                const response = await fetch('/Cart/GetCartItemCount'); // Action no CartController
                if (response.ok) {
                    const count = await response.json();
                    $('#cart-item-count').text(count);
                }
            } catch (error) {
                console.error('Erro ao carregar contador do carrinho:', error);
            }
        });

    </script>
}