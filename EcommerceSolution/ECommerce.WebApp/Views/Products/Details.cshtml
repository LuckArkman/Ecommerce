@model ECommerce.WebApp.Models.ProductDetailViewModel
@{
    ViewData["Title"] = Model.Product?.Name ?? "Detalhes do Produto";
    var product = Model.Product;
    var averageRating = Model.Reviews?.Any() == true ? Model.Reviews.Average(r => r.Rating) : 0.0;
    var totalReviews = Model.Reviews?.Count ?? 0;
    var ratingCounts = Model.Reviews?
        .GroupBy(r => r.Rating)
        .ToDictionary(g => g.Key, g => g.Count()) ?? new Dictionary<int, int>();

    Func<int, int> getRatingCount = (rating) => ratingCounts.GetValueOrDefault(rating, 0);
    Func<int, double> getRatingPercentage = (rating) => totalReviews == 0 ? 0 : (double)getRatingCount(rating) / totalReviews * 100;
}

<!-- Breadcrumb -->
<nav aria-label="breadcrumb" class="container-fluid breadcrumb-custom">
    <ol class="breadcrumb mb-0">
        <li class="breadcrumb-item"><a asp-controller="Home" asp-action="Index">Home</a></li>
        <li class="breadcrumb-item"><a asp-controller="Products" asp-action="Index">Produtos</a></li>
        @if (product != null)
        {
            <li class="breadcrumb-item"><a asp-controller="Products" asp-action="Index" asp-route-categoryId="@product.CategoryId">@product.CategoryName</a></li>
            <li class="breadcrumb-item active" aria-current="page">@product.Name</li>
        }
    </ol>
</nav>

<div class="container my-4">
    @if (product == null)
    {
        <div class="text-center my-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Carregando...</span>
            </div>
            <p class="mt-2"><em>Produto não encontrado ou erro ao carregar.</em></p>
        </div>
    }
    else
    {
        <div class="product-details-section">
            <div class="row">
                <!-- Imagens do Produto -->
                <div class="col-md-6">
                    <div class="main-image mb-3">
                        <img src="@product.ImageUrl" class="img-fluid" alt="@product.Name" id="main-product-image">
                    </div>
                    <div class="thumbnail-images d-flex justify-content-center">
                        <img src="@product.ImageUrl" class="img-fluid me-2 selected" data-image-url="@product.ImageUrl" alt="Miniatura 1">
                        <!-- Se você tiver outras URLs de imagens no ProductDto, renderize-as aqui -->
                        @* <img src="/images/product_images/banco_liva_variacao1.jpg" class="img-fluid me-2" data-image-url="/images/product_images/banco_liva_variacao1.jpg" alt="Miniatura 2"> *@
                    </div>
                </div>

                <!-- Informações do Produto -->
                <div class="col-md-6">
                    <h1 class="product-title">@product.Name</h1>
                    <p class="text-muted small">REF: 12345</p>

                    <div class="d-flex align-items-center mb-3">
                        <div class="product-rating">
                            @for (int i = 1; i <= 5; i++)
                            {
                                <i class="bi @(i <= Math.Round(averageRating) ? "bi-star-fill" : "bi-star")"></i>
                            }
                        </div>
                        <span class="ms-2 text-muted">(@totalReviews avaliações)</span>
                        <a href="#reviews-section" class="ms-3 text-decoration-none" id="review-link">Faça uma avaliação</a>
                    </div>

                    <div class="d-flex align-items-baseline mb-3">
                        <span class="product-price-main">@product.Price.ToString("C")</span>
                        @if (product.Price > 100 && product.Price < 1000)
                        {
                            <span class="product-price-old">@(product.Price / 0.9m).ToString("C")</span>
                        }
                    </div>
                    <p class="text-muted">ou 10x de @((product.Price / 10).ToString("C")) sem juros</p>
                    <p class="text-success small fw-bold">Garanta: 1 ano após o recebimento do produto</p>

                    <div class="d-flex align-items-center mb-3">
                        <input type="number" value="1" min="1" max="@product.Stock" class="form-control me-2" style="width: 80px;" id="quantity-input" />
                        <button class="btn btn-buy" id="add-to-cart-details-btn" data-product-id="@product.Id" data-product-name="@product.Name" data-product-price="@product.Price" data-product-image="@product.ImageUrl" data-product-stock="@product.Stock" @(product.Stock <= 0 ? "disabled" : "")>
                            COMPRAR
                        </button>
                    </div>

                    <div class="shipping-calculator mb-3">
                        <label class="product-option-label">Calcule o frete:</label>
                        <div class="input-group mb-2">
                            <input type="text" class="form-control" placeholder="00000-000" id="zipcode-input">
                            <button class="btn btn-outline-secondary" type="button" id="calculate-shipping-btn">OK</button>
                        </div>
                        <small class="text-muted" id="shipping-message"></small>
                    </div>

                    <div class="social-share mt-4">
                        <p class="mb-2">Gostou? Compartilhe nas redes sociais!</p>
                        <a href="#"><i class="bi bi-facebook"></i></a>
                        <a href="#"><i class="bi bi-twitter"></i></a>
                        <a href="#"><i class="bi bi-whatsapp"></i></a>
                        <a href="#"><i class="bi bi-pinterest"></i></a>
                    </div>
                </div>
            </div>
        </div>

        <!-- Descrição do Produto e Características (Abas) -->
        <div class="mt-5">
            <ul class="nav nav-tabs" id="productDetailsTab" role="tablist">
                <li class="nav-item" role="presentation">
                    <button class="nav-link active" id="description-tab" data-bs-toggle="tab" data-bs-target="#description" type="button" role="tab" aria-controls="description" aria-selected="true">Descrição do produto</button>
                </li>
                <li class="nav-item" role="presentation">
                    <button class="nav-link" id="characteristics-tab" data-bs-toggle="tab" data-bs-target="#characteristics" type="button" role="tab" aria-controls="characteristics" aria-selected="false">Características</button>
                </li>
            </ul>
            <div class="tab-content py-3 px-4">
                <div class="tab-pane fade show active" id="description" role="tabpanel" aria-labelledby="description-tab">
                    <p>@product.Description</p>
                    <p>Conheça o @product.Name, o toque minimalista que seu espaço estava pedindo! ...</p>
                    <h6 class="fw-bold">Informações sobre produto</h6>
                    <ul>
                        <li>Tampo em BP melamínico com Tauari 15mm.</li>
                        <li>Assento estofado na opção de courino nas cores caramelo e preta, ou linho nos tons cinza, roxo, verde e grafite.</li>
                        <li>Pés em madeira reflorestada, envernizada e selada com verniz.</li>
                        <li>Requer montagem que fica sob responsabilidade do cliente. Acompanha manual com passo a passo e todas as ferragens necessárias para montagem.</li>
                    </ul>
                </div>
                <div class="tab-pane fade product-characteristics" id="characteristics" role="tabpanel" aria-labelledby="characteristics-tab">
                    <h6 class="fw-bold">Características Gerais</h6>
                    <table>
                        <tbody>
                            <tr>
                                <th>Peso</th>
                                <td>@((product.Price / 100).ToString("N1")) kg</td>
                            </tr>
                            <tr>
                                <th>Altura</th>
                                <td>48 cm</td>
                            </tr>
                            <tr>
                                <th>Largura</th>
                                <td>100 cm</td>
                            </tr>
                            <tr>
                                <th>Profundidade</th>
                                <td>36 cm</td>
                            </tr>
                            <tr>
                                <th>Garantia</th>
                                <td>1 Ano</td>
                            </tr>
                            <tr>
                                <th>Necessita Montagem?</th>
                                <td>Parcial - Fixação dos pés</td>
                            </tr>
                            <tr>
                                <th>Manual de Montagem</th>
                                <td><a href="#" target="_blank">Acessar Manual de Montagem</a></td>
                            </tr>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>

        <!-- Produtos Relacionados -->
        <div class="related-products-section mt-5">
            <h4 class="text-center fw-bold mb-4" style="color: var(--primary-color);">Produtos Relacionados</h4>
            @if (Model.RelatedProducts != null && Model.RelatedProducts.Any())
            {
                <div class="row">
                    @foreach (var relatedProduct in Model.RelatedProducts)
                    {
                        <div class="col-md-3 mb-4">
                            <div class="card h-100">
                                <img src="@relatedProduct.ImageUrl" class="card-img-top" alt="@relatedProduct.Name" style="height: 200px;">
                                <div class="card-body text-center d-flex flex-column">
                                    <h5 class="card-title fw-bold">@relatedProduct.Name</h5>
                                    <p class="card-text fs-5 fw-bold text-success">@relatedProduct.Price.ToString("C")</p>
                                    @if (relatedProduct.Price > 100 && relatedProduct.Price < 1000)
                                    {
                                        <p class="card-text text-decoration-line-through text-danger small">@(relatedProduct.Price / 0.9m).ToString("C")</p>
                                        <span class="badge bg-danger position-absolute top-0 end-0 mt-2 me-2">9% OFF</span>
                                    }
                                    <a asp-controller="Products" asp-action="Details" asp-route-id="@relatedProduct.Id" class="btn btn-outline-primary mt-auto">Ver Detalhes</a>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <p class="text-center">Nenhum produto relacionado encontrado.</p>
            }
        </div>

        <!-- Avaliação Geral do Produto e Comentários -->
        <div id="reviews-section" class="product-reviews-section mt-5">
            <h4 class="text-center fw-bold mb-4" style="color: var(--primary-color);">Avaliação geral do produto</h4>

            <div class="row align-items-center mb-4">
                <div class="col-md-3 text-center">
                    <div class="review-summary-box p-3">
                        <div class="rating-score">@averageRating.ToString("F1")/5.0</div>
                        <div class="star-rating">
                            @for (int i = 1; i <= 5; i++)
                            {
                                <i class="bi @(i <= Math.Round(averageRating) ? "bi-star-fill" : "bi-star")"></i>
                            }
                        </div>
                        <p class="text-muted mb-0">Baseado em @totalReviews avaliações</p>
                    </div>
                </div>
                <div class="col-md-5">
                    <div class="rating-progress mb-2">
                        @for (int i = 5; i >= 1; i--)
                        {
                            <div class="d-flex align-items-center mb-1">
                                <span class="me-2">@i</span>
                                <div class="progress flex-grow-1" role="progressbar" aria-label="Rating @i stars" aria-valuenow="@(getRatingPercentage(i))" aria-valuemin="0" aria-valuemax="100">
                                    <div class="progress-bar" style="width: @(getRatingPercentage(i))%"></div>
                                </div>
                                <span class="ms-2 text-muted">(@getRatingCount(i))</span>
                            </div>
                        }
                    </div>
                </div>
                <div class="col-md-4 text-center">
                    <button class="btn btn-review-write" id="toggle-review-form-btn">
                        <i class="bi bi-pencil-square me-2"></i> Faça uma avaliação
                    </button>
                </div>
            </div>

            <!-- Formulário de Avaliação (visível apenas quando toggleReviewForm é true) -->
            <div id="review-form-section" class="review-form-section mt-4" style="display: none;">
                <h5 class="fw-bold mb-3">Sua Avaliação</h5>
                <form id="review-form">
                    <input type="hidden" name="ProductId" value="@product.Id" />
                    <div class="mb-3">
                        <label class="form-label">Sua Nota:</label>
                        <div class="star-rating-input" id="review-stars">
                            <i class="bi bi-star" data-rating="1"></i>
                            <i class="bi bi-star" data-rating="2"></i>
                            <i class="bi bi-star" data-rating="3"></i>
                            <i class="bi bi-star" data-rating="4"></i>
                            <i class="bi bi-star" data-rating="5"></i>
                            <input type="hidden" name="Rating" id="review-rating-input" value="0" />
                        </div>
                    </div>
                    <div class="mb-3">
                        <label for="comment" class="form-label">Seu Comentário:</label>
                        <textarea id="comment" name="Comment" class="form-control" rows="4"></textarea>
                    </div>
                    <div id="review-message" class="alert mt-3" style="display:none;"></div>
                    <button type="submit" class="btn btn-primary" id="submit-review-btn">Enviar Avaliação</button>
                    <button type="button" class="btn btn-secondary ms-2" id="cancel-review-btn">Cancelar</button>
                </form>
            </div>

            <!-- Filtros e Ordenação de Comentários/Avaliações -->
            <div class="reviews-filter-sort mt-4 d-flex justify-content-center flex-wrap">
                <button class="btn active" data-filter="all">Todas</button>
                <button class="btn" data-filter="withComments">Com comentários</button>
                <button class="btn active" data-order="newest">Mais recentes</button>
                <button class="btn" data-order="oldest">Mais antigos</button>
                <button class="btn" data-order="highest">Maiores notas</button>
                <button class="btn" data-order="lowest">Menores notas</button>
            </div>

            <!-- Listagem de Comentários/Avaliações -->
            <div class="reviews-list mt-4" id="reviews-list-container">
                @if (Model.Reviews != null && Model.Reviews.Any())
                {
                    @foreach (var review in Model.Reviews)
                    {
                        <div class="card mb-3 shadow-sm">
                            <div class="card-body">
                                <div class="d-flex justify-content-between align-items-center mb-2">
                                    <h6 class="mb-0 fw-bold">@review.UserName</h6>
                                    <small class="text-muted">@review.CreatedAt.ToShortDateString()</small>
                                </div>
                                <div class="star-rating mb-2">
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        <i class="bi @(i <= review.Rating ? "bi-star-fill" : "bi-star")"></i>
                                    }
                                </div>
                                <p class="card-text">@review.Comment</p>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="alert alert-info text-center">
                        Nenhuma avaliação ainda. Seja o primeiro a avaliar!
                    </div>
                }
            </div>
        </div>
    }
</div>

@section Scripts {
    <script>
        // Lógica para alternar imagem principal
        $('.thumbnail-images img').on('click', function() {
            $('.thumbnail-images img').removeClass('selected');
            $(this).addClass('selected');
            $('#main-product-image').attr('src', $(this).data('image-url'));
        });

        // Lógica para cálculo de frete (simulado)
        $('#calculate-shipping-btn').on('click', function() {
            const zipCode = $('#zipcode-input').val();
            if (!zipCode || zipCode.length < 8) {
                $('#shipping-message').text("Por favor, digite um CEP válido.");
                return;
            }
            $('#shipping-message').text(`Frete para ${zipCode}: R$ 25,00 (entrega em 5-7 dias úteis)`);
        });

        // Lógica para adicionar ao carrinho (AJAX) - similar ao index de produtos
        $('#add-to-cart-details-btn').on('click', async function() {
            const productId = $(this).data('product-id');
            const quantity = parseInt($('#quantity-input').val());

            if (quantity <= 0 || quantity > $(this).data('product-stock')) {
                alert('Quantidade inválida ou superior ao estoque disponível.');
                return;
            }

            try {
                const response = await fetch('/Cart/AddToCart', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    body: JSON.stringify({ productId: productId, quantity: quantity })
                });

                if (response.ok) {
                    let currentCount = parseInt($('#cart-item-count').text());
                    $('#cart-item-count').text(currentCount + quantity);
                    alert(`Produto adicionado ao carrinho!`);
                } else if (response.status === 401) {
                    alert("Você precisa estar logado para adicionar itens ao carrinho.");
                    window.location.href = '/Identity/Account/Login';
                } else {
                    const errorData = await response.json();
                    alert('Erro ao adicionar ao carrinho: ' + (errorData.message || response.statusText));
                }
            } catch (error) {
                console.error('Erro de rede:', error);
                alert('Erro de rede ao adicionar ao carrinho.');
            }
        });

        // Lógica para Avaliações
        let currentRating = 0; // Para o formulário de avaliação

        $('#toggle-review-form-btn').on('click', function() {
            $('#review-form-section').slideToggle();
            // Resetar o formulário
            $('#review-form')[0].reset();
            $('#review-rating-input').val(0);
            $('#review-stars i').removeClass('bi-star-fill selected').addClass('bi-star');
            $('#review-message').hide().removeClass('alert-success alert-danger').text('');
            currentRating = 0;
        });

        $('#cancel-review-btn').on('click', function() {
            $('#review-form-section').slideUp();
        });

        $('#review-stars i').on('click', function() {
            currentRating = $(this).data('rating');
            $('#review-rating-input').val(currentRating);
            $('#review-stars i').each(function(index) {
                if (index < currentRating) {
                    $(this).removeClass('bi-star').addClass('bi-star-fill selected');
                } else {
                    $(this).removeClass('bi-star-fill selected').addClass('bi-star');
                }
            });
        });

        $('#review-form').on('submit', async function(e) {
            e.preventDefault();
            const productId = $('input[name="ProductId"]').val();
            const rating = parseInt($('#review-rating-input').val());
            const comment = $('#comment').val();
            const messageDiv = $('#review-message');

            if (rating === 0) {
                messageDiv.text('Por favor, dê uma nota de 1 a 5 estrelas.').removeClass('alert-success').addClass('alert-danger').show();
                return;
            }

            try {
                const response = await fetch('/Reviews/AddReview', { // Controller Reviews, Action AddReview
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': $('input[name="__RequestVerificationToken"]').val()
                    },
                    body: JSON.stringify({ productId: productId, rating: rating, comment: comment })
                });

                if (response.ok) {
                    messageDiv.text('Avaliação enviada com sucesso!').removeClass('alert-danger').addClass('alert-success').show();
                    $('#review-form-section').slideUp();
                    // Recarregar reviews dinamicamente
                    loadReviewsAjax(@Model.Product.Id);
                } else if (response.status === 401) {
                     messageDiv.text('Você precisa estar logado para enviar uma avaliação.').removeClass('alert-success').addClass('alert-danger').show();
                     setTimeout(() => window.location.href = '/Identity/Account/Login', 2000); // Redireciona após 2s
                }
                else {
                    const errorData = await response.json();
                    messageDiv.text('Erro ao enviar avaliação: ' + (errorData.message || response.statusText)).removeClass('alert-success').addClass('alert-danger').show();
                }
            } catch (error) {
                console.error('Erro de rede:', error);
                messageDiv.text('Erro de rede ao enviar avaliação.').removeClass('alert-success').addClass('alert-danger').show();
            }
        });

        // Lógica para filtrar e ordenar avaliações (AJAX)
        $('.reviews-filter-sort .btn').on('click', function() {
            $('.reviews-filter-sort .btn').removeClass('active');
            $(this).addClass('active');

            const filter = $(this).data('filter');
            const order = $(this).data('order');

            if (filter) { // Se for um botão de filtro
                selectedReviewFilter = filter;
            }
            if (order) { // Se for um botão de ordem
                selectedReviewOrder = order;
            }
            loadReviewsAjax(@Model.Product.Id);
        });

        let selectedReviewFilter = "all"; // Estado inicial do filtro
        let selectedReviewOrder = "newest"; // Estado inicial da ordem

        async function loadReviewsAjax(productId) {
            try {
                const response = await fetch(`/Reviews/GetReviewsByProduct?productId=${productId}&filter=${selectedReviewFilter}&order=${selectedReviewOrder}`); // Novo endpoint ReviewsController
                if (response.ok) {
                    const reviews = await response.json();
                    renderReviews(reviews); // Função para renderizar as avaliações
                } else {
                    console.error('Erro ao carregar avaliações AJAX:', response.statusText);
                }
            } catch (error) {
                console.error('Erro de rede ao carregar avaliações AJAX:', error);
            }
        }

        function renderReviews(reviews) {
            const container = $('#reviews-list-container');
            container.empty(); // Limpa o conteúdo atual

            if (reviews.length === 0) {
                container.append('<div class="alert alert-info text-center">Sem avaliações para o filtro selecionado!</div>');
                return;
            }

            reviews.forEach(review => {
                let stars = '';
                for (let i = 1; i <= 5; i++) {
                    stars += `<i class="bi ${i <= review.rating ? 'bi-star-fill' : 'bi-star'}"></i>`;
                }
                const cardHtml = `
                    <div class="card mb-3 shadow-sm">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center mb-2">
                                <h6 class="mb-0 fw-bold">${review.userName}</h6>
                                <small class="text-muted">${new Date(review.createdAt).toLocaleDateString()}</small>
                            </div>
                            <div class="star-rating mb-2">${stars}</div>
                            <p class="card-text">${review.comment}</p>
                        </div>
                    </div>
                `;
                container.append(cardHtml);
            });
        }

    </script>
}