@page "/Authentication/register"
@using ECommerce.Client.Auth
@using ECommerce.Models.DTOs.User
@inject CustomAuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@rendermode InteractiveWebAssembly

<h3>Registro</h3>

<EditForm Model="registerModel" OnValidSubmit="HandleRegister" FormName="RegisterForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="email" class="form-label">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="registerModel.Email" />
        <ValidationMessage For="@(() => registerModel.Email)" />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Senha:</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="registerModel.Password" />
        <ValidationMessage For="@(() => registerModel.Password)" />
    </div>

    <div class="mb-3">
        <label for="confirmPassword" class="form-label">Confirmar Senha:</label>
        <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="registerModel.ConfirmPassword" />
        <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }

    <button type="submit" class="btn btn-primary">Registrar</button>
    <p class="mt-3">Já tem uma conta? <a href="/authentication/login">Faça login aqui</a></p>
</EditForm>

@code {
    private RegisterRequest registerModel = new();
    private string errorMessage = string.Empty;

    private async Task HandleRegister()
    {
        // Em um cenário real, você chamaria sua API de registro aqui.
        // Ex: var response = await _httpClient.PostAsJsonAsync("api/auth/register", registerModel);
        //    if (response.IsSuccessStatusCode) { ... }
        // Por enquanto, apenas simulamos:

        if (registerModel.Password != registerModel.ConfirmPassword)
        {
            errorMessage = "As senhas não coincidem.";
            return;
        }

        // Simular registro e login automático
        // No mundo real: criar usuário via API, então logar
        AuthStateProvider.MarkUserAsAuthenticated(registerModel.Email);
        NavigationManager.NavigateTo("/");
    }
}