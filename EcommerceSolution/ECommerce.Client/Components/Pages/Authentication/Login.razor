@page "/authentication/register"
@using ECommerce.Client.Auth
@using ECommerce.Client.Services
@using ECommerce.Models.DTOs.User
@inject AuthApiClient AuthApiClient
@inject JwtAuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@rendermode InteractiveWebAssembly

<h3>Registro</h3>

<EditForm Model="registerModel" OnValidSubmit="HandleRegister" FormName="RegisterForm">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="email" class="form-label">Email:</label>
        <InputText id="email" class="form-control" @bind-Value="registerModel.Email" />
        <ValidationMessage For="@(() => registerModel.Email)" />
    </div>

    <div class="mb-3">
        <label for="password" class="form-label">Senha:</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="registerModel.Password" />
        <ValidationMessage For="@(() => registerModel.Password)" />
    </div>

    <div class="mb-3">
        <label for="confirmPassword" class="form-label">Confirmar Senha:</label>
        <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="registerModel.ConfirmPassword" />
        <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }

    <button type="submit" class="btn btn-primary" disabled="@isRegistering">
        @if (isRegistering)
        {
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            Registrando...
        }
        else
        {
            <span>Registrar</span>
        }
    </button>
    <p class="mt-3">Já tem uma conta? <a href="/authentication/login">Faça login aqui</a></p>
</EditForm>

@code {
    private RegisterRequest registerModel = new();
    private string errorMessage = string.Empty;
    private bool isRegistering = false;

    private async Task HandleRegister()
    {
        isRegistering = true;
        errorMessage = string.Empty;

        try
        {
            var success = await AuthApiClient.Register(registerModel);

            if (success)
            {
                // Opcional: Logar o usuário automaticamente após o registro
                var loginResult = await AuthApiClient.Login(new LoginRequest { Email = registerModel.Email, Password = registerModel.Password });
                if (loginResult.Success)
                {
                    AuthStateProvider.MarkUserAsAuthenticated(loginResult.Token);
                    NavigationManager.NavigateTo("/");
                }
                else
                {
                    errorMessage = "Registro bem-sucedido, mas o login automático falhou. Por favor, faça login manualmente.";
                    NavigationManager.NavigateTo("/authentication/login");
                }
            }
            else
            {
                errorMessage = "Falha no registro. Verifique os dados.";
            }
        }
        catch (HttpRequestException httpEx)
        {
            var errorContent = await httpEx.ReadStringContentAsync();
            errorMessage = $"Erro na API: {errorContent}";
            Console.WriteLine($"Register API Error: {errorContent}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Ocorreu um erro inesperado: {ex.Message}";
            Console.WriteLine($"Register Error: {ex.Message}");
        }
        finally
        {
            isRegistering = false;
        }
    }
}